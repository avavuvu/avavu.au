---
import type { GetStaticPaths } from "astro";
import Layout from "../../layouts/Layout.astro";
import Other from "../components/Other.svelte"
import { getCollection } from "astro:content";
import { collections } from "../../content.config";
import type { CollectionKey, DataEntryMap, InferEntrySchema } from "astro:content";
import type { CollectionEntry } from "astro:content";
import AllWork from "../../components/AllWork.svelte"
import { undefined } from "astro:schema";

const data = await Promise.all(Object.keys(collections).flatMap(name => getCollection(name as CollectionKey)))

type Project = InferEntrySchema<keyof DataEntryMap>

type Collection = (keyof DataEntryMap) | "" 

type ProjectData = {
    data: Project,
    id: string,
    collection: Collection
}



const allProjects: ProjectData[] = data
    .flat()
    .toSorted(({data: dataA}, {data: dataB}) => {
        return dataA.date.getTime() - dataB.date.getTime()})
    .map(({data, collection}, index) => ({
        collection,
        data,
        id: `${index}`.padStart(3, "0")
    }))
    .toReversed()

const getProjectSorting = (sort: any) => {


    if(sort === "year") {
        return Object.groupBy(allProjects, ({data}) => data.date.getFullYear().toString())
    }else if(sort === "rating") {
        return Object.groupBy(allProjects, ({data}) => 
            data.rating ? `${'â˜…'.repeat(data.rating)}` : "other")
    } else if(sort === "type") {
        return Object.groupBy(allProjects, ({collection}) => collection)
    }

    return Object.groupBy(allProjects, ({data}) => data.date.getFullYear().toString())
}

export const getStaticPaths = (() => {
    return [
        { params: { path: "year" }},
        { params: { path: "rating" }},
        { params: { path: "type" }},
        { params: { path: undefined }},
    ];
}) 

const { path } = Astro.params

const projects = getProjectSorting(path)

---

<Layout>
    <main class="">
        <AllWork allProjects={projects} {path} client:only="svelte" ></AllWork>
    </main>

</Layout>
