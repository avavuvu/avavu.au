---
import { getCollection } from "astro:content"
import Article from "../../components/writing/Article.svelte"
import WritingLayout from "../../layouts/WritingLayout.astro";
import convertToUrl from "../../lib/util/convertToUrl";
import { remark } from "remark"
import { visit } from "unist-util-visit"
import { h } from "hastscript"
import type { Root } from "mdast"
import remarkDirective from "remark-directive";
import remarkRehype from 'remark-rehype'
import rehypeStringify from 'rehype-stringify'
import remarkParse from 'remark-parse'
import { unified } from "unified";

export async function getStaticPaths() {
  const writing = await getCollection("writing");

  return writing.map(({data}) => ({
    params: { id: convertToUrl(data.title) },
  }));
}

const { id } = Astro.params

if(!id) {
    return Astro.response(404)
}

const writing = await getCollection("writing")
const entry = writing.find((({data}) => convertToUrl(data.title) === id))

if(!entry) {
    return Astro.response(404)
}

const attribution = () => {
    return (tree: Root) => {
    visit(tree, (node) => {
      if (
        node.type === 'containerDirective' ||
        node.type === 'leafDirective' ||
        node.type === 'textDirective'
      ) {
        if (node.name !== 'attribution') return

        const data = node.data || (node.data = {})
        const tagName = "div"

        data.hName = tagName
        data.hProperties = {
            ...h(tagName, node.attributes || {}).properties,
            className: "attribution"
        }
      }
    })
  }
}

const headingId = () => {
  return (tree: Root) => {
    visit(tree, 'heading', (node) => {

        const data = node.data || (node.data = {})
        const tagName = `h${node.depth}`

        const text = node.children.find(child => child.type === "text")

        const id = convertToUrl(text?.value || "")

        data.hName = tagName
        data.hProperties = {
            ...h(tagName).properties,
            id
        }

    })
  }
}

const remarkPlainText = () => {
  return (tree: Root) => {
    let text = ''
    visit(tree, 'text', (node) => {
      text += node.value + ' '
    })
  }
}

const markdown = await unified()
    .use(remarkParse)
    .use(remarkDirective)
    .use(attribution)
    .use(headingId)
    .use(remarkRehype)
    .use(rehypeStringify)
    .process(entry.body!)

const description = await unified()
    .use(remarkParse)
    .use(remarkDirective)
    .use(remarkRehype)
    .use(rehypeStringify)
    .process(entry.data.description)

const plainDescription = await unified()
    .use(remarkParse)
    .use(remarkDirective)
    .use(remarkPlainText)
    .use(remarkRehype)
    .use(rehypeStringify)
    .process(entry.data.description)

const hero = typeof entry.data.heroImageSrc === "string"
    ? entry.data.heroImageSrc
    : entry.data.heroImageSrc.find(src => src.endsWith(".png") || src.endsWith(".jpg"))!

---

<WritingLayout 
    title={entry.data.title} 
    image={hero}
    description={plainDescription.toString()}
    author={entry.data.author}
    tags={entry.data.tags || []}>

    <main>
        <Article 
            client:only="svelte"
            data={entry.data} 
            bodyMarkdown={markdown.toString()}
            descriptionMarkdown={description.toString()}>
        </Article>
    </main>

</WritingLayout>